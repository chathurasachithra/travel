{"version":3,"sources":["app.js","routes.js","controllers/HomeController.js","directives/elements.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"app.js","sourcesContent":["var app = angular.module('travelApp', [\r\n    \"ngSanitize\"\r\n]);\r\n\r\napp.config(function($sceDelegateProvider) {\r\n    $sceDelegateProvider.resourceUrlWhitelist([\r\n        // Allow same origin resource loads.\r\n        'self',\r\n        // Allow loading from our assets domain.  Notice the difference between * and **.\r\n        // cdnImageURL +'**'\r\n    ]);\r\n\r\n});\r\n\r\napp.config(function ($httpProvider) {\r\n    $httpProvider.useApplyAsync(true);\r\n});\r\n\r\napp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.debugInfoEnabled(false);\r\n}]);","//\r\n///**\r\n// * ************************************************************************\r\n// * These Angular routes should be mapped with Laravel in order to send 404,\r\n// * for invalid URLs for SEO purposes.\r\n// * Routes should be mapped in app/Http/routes/angular-catch-all.php\r\n// * ************************************************************************\r\n// */\r\n//\r\n///**\r\n// * Hide the spinning loader in angular loading progress bar\r\n// */\r\n//app.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n//    cfpLoadingBarProvider.includeSpinner = false;\r\n//}]);\r\n//\r\n//\r\n///**\r\n// * Create HTML templates relative path\r\n// */\r\n//function template(name) {\r\n//    return 'app/templates/' + name;\r\n//}\r\n//\r\n//app.config(function ($routeProvider, $locationProvider) {\r\n//    \"ngInject\";\r\n//    /**\r\n//     * Define the route of the paths\r\n//     * isAuth parameter defines the state of the route\r\n//     * -1 == Should Not logged in\r\n//     * 0 == Either login or logout\r\n//     * 1 == Should login\r\n//     */\r\n//\r\n//    /**\r\n//     * =======================\r\n//     * Temporary routes\r\n//     * Login\r\n//     */\r\n//    $routeProvider\r\n//        .when('/login-user', {\r\n//            templateUrl: cdnURL + 'temp/login.html',\r\n//            reloadOnSearch: true,\r\n//            prParams: {\r\n//                isAuth: -1\r\n//            }\r\n//        })\r\n//        .when('/create-profile', {\r\n//            templateUrl: cdnURL + 'temp/select-profile.html',\r\n//            reloadOnSearch: true,\r\n//            prParams: {\r\n//                isAuth: 1\r\n//            }\r\n//        })\r\n//        .otherwise({\r\n//            //redirectTo: '/'\r\n//            templateUrl: cdnURL + 'static/error.html',\r\n//            reloadOnSearch: false,\r\n//            prParams: {\r\n//                isAuth: 0\r\n//            }\r\n//    });\r\n//\r\n//    /**\r\n//     * This will remove hash bang from the routes\r\n//     */\r\n//    $locationProvider.html5Mode(true);\r\n//});\r\n//\r\n//\r\n//app.run(function run($rootScope, $location, $window, epUser, epShared, epEvents, epConstants, epValidations, epAccount, $translate, epDialog) {\r\n//\r\n//    \"ngInject\";\r\n//    $rootScope.$on(\"$routeChangeStart\", function (event, current, previous) {\r\n//\r\n//        var currentUrl = $location.url();\r\n//\r\n//\r\n//        /**\r\n//         * Check for temporary site configuration\r\n//         */\r\n//        if (!epConstants.IS_TEMP) {\r\n//\r\n//            var notAllowedTempRoutes = ['/login-user', '/create-profile'];\r\n//\r\n//            if (!epUser.isLogged() && current.prParams && current.prParams.isAuth == 1) {\r\n//                $location.path('/login').search({redirect: currentUrl});\r\n//            } else if (epUser.isLogged() && current.prParams && current.prParams.isAuth == -1) {\r\n//                $location.path('/');\r\n//            } else {\r\n//                //Neutral path. Doesn't matter weather you login or logout\r\n//                if (current.$$route && notAllowedTempRoutes.indexOf(current.$$route.originalPath) >= 0) {\r\n//                    $location.path('/');\r\n//                }\r\n//            }\r\n//        } else {\r\n//\r\n//            var allowedTempRoutes = ['/login-user', '/create-profile', '/stylist/create', '/business/create',\r\n//                '/stylist/:locationSlug/:nameSlug', '/business/:locationSlug/:nameSlug'];\r\n//\r\n//            if (current.$$route && allowedTempRoutes.indexOf(current.$$route.originalPath) < 0) {\r\n//                if (!epUser.isLogged() && current.prParams) {\r\n//                    $location.path('/login-user');\r\n//                } else if (epUser.isLogged() && current.prParams) {\r\n//                    $location.path('/create-profile');\r\n//                }\r\n//            } else {\r\n//                if (!epUser.isLogged() && current.prParams && current.prParams.isAuth == 1) {\r\n//                    $location.path('/login-user');\r\n//                } else if (epUser.isLogged() && current.prParams && current.prParams.isAuth == -1) {\r\n//\r\n//                    if (current.$$route.originalPath == '/login-user' && !epValidations.empty($location.search().uld)) {\r\n//                        if($location.search().uld != epUser.getUserID()){\r\n//                            epAccount.logout();\r\n//                        } else{\r\n//                            $location.path('/create-profile');\r\n//                        }\r\n//                    } else {\r\n//                        $location.path('/create-profile');\r\n//                    }\r\n//\r\n//                } else {\r\n//                    //Neutral path. Doesn't matter weather you login or logout\r\n//                    if (current.$$route && (current.$$route.originalPath == '/stylist/:locationSlug/:nameSlug' ||\r\n//                        current.$$route.originalPath == '/business/:locationSlug/:nameSlug') && !epUser.isLogged()) {\r\n//                        $location.path('/login-user');\r\n//                    }\r\n//                }\r\n//            }\r\n//\r\n//        }\r\n//\r\n//\r\n//        if(previous && previous.$$route && previous.originalPath == \"/search\"){\r\n//            epShared.setBackPath({\r\n//                path: '/search',\r\n//                params: previous.params\r\n//            });\r\n//        } else{\r\n//            epShared.setBackPath({\r\n//                path: '',\r\n//                params: {}\r\n//            });\r\n//        }\r\n//\r\n//\r\n//\r\n//        /**\r\n//         * Handle cancel booking when redirecting form the bookings page to another\r\n//         */\r\n//        if (epUser.isLogged() && previous && previous.$$route && previous.$$route.originalPath && previous.$$route.originalPath == '/payment/:BookingID') {\r\n//            epShared.setIsBooking(true);\r\n//            epEvents.triggerSetBookingFormStatus();\r\n//            var tempPath = '';\r\n//            if (epShared.getIsBookingFormDirty()) {\r\n//\r\n//                if (!($location.path().indexOf('/payment/') > -1)) {\r\n//                    tempPath = $location.path();\r\n//                }\r\n//\r\n//                event.preventDefault();\r\n//\r\n//                epDialog.confirm($translate.instant('WARNING.DISCARD_CHANGES'), function () {\r\n//                    epShared.setIsBookingFormDirty(false);\r\n//                    epEvents.triggerCancelBooking(tempPath);\r\n//                });\r\n//\r\n//            } else {\r\n//                event.preventDefault();\r\n//                epShared.setIsBookingFormDirty(false);\r\n//                epEvents.triggerCancelBooking($location.path());\r\n//            }\r\n//        }\r\n//\r\n//    });\r\n//\r\n//    $rootScope.$on('$locationChangeStart', function (event, next, current) {\r\n//        if (next != current) {\r\n//            /**\r\n//             * Trigger tag manager to be false\r\n//             */\r\n//            epEvents.triggerRouteChangeStart(false);\r\n//\r\n//            epEvents.triggerSeoUpdate(epConstants.META.TITLE,\r\n//                epConstants.META.DESCRIPTION,\r\n//                epConstants.META.KEYWORDS);\r\n//            epShared.setBookingDataForSignup({\r\n//                status: false,\r\n//                data: {}\r\n//            });\r\n//            epEvents.triggerClearResponse();\r\n//        }\r\n//    });\r\n//\r\n//});\r\n//\r\n","\r\napp.controller('HomeController', function ($scope) {\r\n    \"ngInject\";\r\n\r\n\r\n    $scope.openCalendar = function () {\r\n        $scope.popup.opened = !$scope.popup.opened;\r\n    };\r\n\r\n    $scope.format = 'dd-MMM-yyyy';\r\n\r\n    $scope.popup = {\r\n        opened: false\r\n    };\r\n\r\n    console.log('this is an test');\r\n\r\n    $scope.dismissCalendar = function () {\r\n        $scope.popup.opened = false;\r\n    };\r\n\r\n    $scope.callAlter = function () {\r\n        alert('alert called');\r\n    };\r\n\r\n});","/**\r\n * This directive is made to avoid the headache of handling\r\n * routing in the angular application. Because normally we can\r\n * set the routing in an Angular application with relative path\r\n * where the html5 mode is on via href. But this will create problems if\r\n * the browser is not supporting the html5 routing method. On those\r\n * moments, Angular again fallback for the hash bang routing mechanism and\r\n * the defined routes may break. So the best way is to change the routing\r\n * of the application through $location service. This directive ep-href\r\n * is a simple directive which retrieve the route location from the\r\n * element it self and change the route accordingly through inbuilt\r\n * Angular $location provider which is safe...\r\n */\r\napp.directive('epHref', function (epUtil) {\r\n    'ngInject';\r\n\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, $element, $attrs) {\r\n            $element.bind('click', function () {\r\n                /**\r\n                 * Close the popup if id given as attribute.\r\n                 * closeModal=\"#selectProfileModal\"\r\n                 **/\r\n                if ($attrs && $attrs.closemodal) {\r\n                    epUtil.hideModal($attrs.closemodal);\r\n                }\r\n\r\n                epUtil.route($attrs.epHref);\r\n            });\r\n        }\r\n    };\r\n});\r\n\r\napp.directive('toggle', function(){\r\n    return {\r\n        restrict: 'A',\r\n        link: function(scope, element, attrs){\r\n            if (attrs.toggle==\"tooltip\"){\r\n                $(element).tooltip();\r\n            }\r\n            if (attrs.toggle==\"popover\"){\r\n                $(element).popover();\r\n            }\r\n        }\r\n    };\r\n});\r\n\r\napp.directive('epServerResponse', function () {\r\n    'ngInject';\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: cdnURL + \"static/response.html\",\r\n        link: function (scope, $element, $attrs) {\r\n            scope.formType = $attrs.form;\r\n            scope.errorsOnly = $attrs.errorsonly;\r\n        }\r\n    };\r\n\r\n});\r\n\r\n\r\napp.directive(\"compareTo\", function () {\r\n    \"ngInject\";\r\n    return {\r\n        require: \"ngModel\",\r\n        scope: {\r\n            otherModelValue: \"=compareTo\"\r\n        },\r\n        link: function (scope, element, attributes, ngModel) {\r\n\r\n            ngModel.$validators.compareTo = function (modelValue) {\r\n                return modelValue == scope.otherModelValue;\r\n            };\r\n\r\n            scope.$watch(\"otherModelValue\", function () {\r\n                ngModel.$validate();\r\n            });\r\n        }\r\n    };\r\n});\r\n\r\n/**\r\n * This directive will check if the input number is a valid decimal number\r\n */\r\napp.directive('validNumber', function () {\r\n    \"ngInject\";\r\n    return function (scope, element, attrs) {\r\n\r\n        var keyCode = [8, 9, 37, 39, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110];\r\n        element.bind(\"keydown\", function (event) {\r\n            if ($.inArray(event.which, keyCode) == -1) {\r\n                scope.$apply(function () {\r\n                    scope.$eval(attrs.onlyNum);\r\n                    event.preventDefault();\r\n                });\r\n                event.preventDefault();\r\n            }\r\n\r\n        });\r\n    };\r\n});\r\n\r\n\r\napp.directive('btnAutoCollapse', function () {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: 'A',\r\n        scope: {},\r\n        link: function (scope, element, attrs) {\r\n            element.on('click', function (event) {\r\n                $(\".navbar-collapse.in\").collapse('hide');\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\napp.directive('ngEnter', function () {\r\n    \"ngInject\";\r\n    return function (scope, elements, attrs) {\r\n        elements.bind('keydown keypress', function (event) {\r\n            if (event.which === 13) {\r\n                scope.$apply(function () {\r\n                    scope.$eval(attrs.ngEnter);\r\n                });\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\r\napp.directive('autoFocus', function ($timeout) {\r\n    return {\r\n        restrict: 'AC',\r\n        link: function (_scope, _element) {\r\n            $timeout(function () {\r\n                _element[0].focus();\r\n            }, 500);\r\n        }\r\n    };\r\n});"]}